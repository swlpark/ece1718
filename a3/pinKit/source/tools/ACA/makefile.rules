##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := dbpSim

# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET := 

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS := 

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS := gzstream cacheSim

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

GET_SOURCE_DEBUG_FILE := 

###### Place architecture-specific definitions here ######

# Place ia32-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),ia32)
    TEST_TOOL_ROOTS += emuload
endif

# Place intel64-specific definitions here if they apply to all supported operating systems.
ifeq ($(TARGET),intel64)
    TEST_TOOL_ROOTS += inscount2_vregs
endif

###### Place OS-specific definitions here ######

# Linux
ifeq ($(TARGET_OS),linux)
    TEST_ROOTS += get_source_location_gnu_debug
    APP_ROOTS += get_source_app_gnu_debug
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS += fence
    endif
endif

# Mac OS X*
ifeq ($(TARGET_OS),mac)
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS += fence
    endif
    GET_SOURCE_DEBUG_FILE := get_source_app:$(OBJDIR)get_source_app.dSYM/Contents/Resources/DWARF/get_source_app
endif

###### Handle exceptions here ######

# TODO: These tests fail on KNC - fix and remove the following:
# for get_source_location see Mantis 2960
ifeq ($(TARGET),mic)
    TEST_TOOL_ROOTS := $(filter-out get_source_location, $(TEST_TOOL_ROOTS))
    TEST_ROOTS := $(filter-out get_source_location_gnu_debug, $(TEST_ROOTS))
    SANITY_SUBSET := $(filter-out get_source_location, $(SANITY_SUBSET))
    APP_ROOTS := $(filter-out get_source_app get_source_app_gnu_debug, $(APP_ROOTS))
endif

# topopcode can't be compiled on 64b Windows
ifeq ($(TARGET_OS),windows)
    ifeq ($(TARGET),intel64)
        TEST_TOOL_ROOTS := $(filter-out topopcode, $(TEST_TOOL_ROOTS))
    endif
endif

ifeq ($(TARGET),mic)
    TEST_TOOL_ROOTS := $(filter-out oper-imm, $(TEST_TOOL_ROOTS))
    APP_ROOTS := $(filter-out oper_imm_app, $(APP_ROOTS))
    OBJECT_ROOTS := $(filter-out oper_imm_asm, $(OBJECT_ROOTS))
endif


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test

# -dwarf file is not applicable for Windows (see use in get_source_location.test below)
ifeq ($(TARGET_OS),windows)
    DWARF_FILE_KNOB :=
  else
    DWARF_FILE_KNOB := -dwarf_file $(GET_SOURCE_DEBUG_FILE)
endif


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.

###### Special tools' build rules ######

$(OBJDIR)dbpSim$(PINTOOL_SUFFIX): $(OBJDIR)dbpSim$(OBJ_SUFFIX) $(OBJDIR)gzstream$(OBJ_SUFFIX) $(OBJDIR)cacheSim$(OBJ_SUFFIX)
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $^ $(TOOL_LPATHS) $(TOOL_LIBS)

###### Special applications' build rules ######
